(function() {
  var Code, blockTrim, exports, isSingleLine, ltrim, p, paren, rtrim, strEscape, strRepeat, trim, unreserve, unshift;

  Code = (function() {

    function Code() {
      this.code = '';
    }

    Code.prototype.add = function(str) {
      this.code += str.toString();
      return this;
    };

    Code.prototype.scope = function(str, level) {
      var indent;
      if (level == null) level = 1;
      indent = strRepeat("  ", level);
      this.code = rtrim(this.code) + "\n";
      this.code += indent + rtrim(str).replace(/\n/g, "\n" + indent) + "\n";
      return this;
    };

    Code.prototype.toString = function() {
      return this.code;
    };

    return Code;

  })();

  paren = function(string) {
    var str;
    str = string.toString();
    if (str.substr(0, 1) === '(' && str.substr(-1, 1) === ')') {
      return str;
    } else {
      return "(" + str + ")";
    }
  };

  strRepeat = function(str, times) {
    var i;
    return ((function() {
      var _results;
      _results = [];
      for (i = 0; 0 <= times ? i < times : i > times; 0 <= times ? i++ : i--) {
        _results.push(str);
      }
      return _results;
    })()).join('');
  };

  ltrim = function(str) {
    return ("" + str).replace(/^\s*/g, '');
  };

  rtrim = function(str) {
    return ("" + str).replace(/\s*$/g, '');
  };

  blockTrim = function(str) {
    return ("" + str).replace(/^\s*\n|\s*$/g, '');
  };

  trim = function(str) {
    return ("" + str).replace(/^\s*|\s*$/g, '');
  };

  isSingleLine = function(str) {
    return trim(str).indexOf("\n") === -1;
  };

  unshift = function(str) {
    var m1, m2, _results;
    str = "" + str;
    _results = [];
    while (true) {
      m1 = str.match(/^/gm);
      m2 = str.match(/^ /gm);
      if (!m1 || !m2 || m1.length !== m2.length) return str;
      _results.push(str = str.replace(/^ /gm, ''));
    }
    return _results;
  };

  strEscape = function(str) {
    return JSON.stringify("" + str);
  };

  p = function(str) {
    if (str.constructor === String) {
      console.log(JSON.stringify(str));
    } else {
      console.log(str);
    }
    return '';
  };

  unreserve = function(str) {
    var _ref;
    if ((_ref = "" + str) === 'in' || _ref === 'loop' || _ref === 'off' || _ref === 'on' || _ref === 'when' || _ref === 'not' || _ref === 'until' || _ref === '__bind' || _ref === '__indexOf') {
      return "" + str + "_";
    } else {
      return "" + str;
    }
  };

  this.Js2coffeeHelpers = exports = {
    Code: Code,
    p: p,
    strEscape: strEscape,
    unreserve: unreserve,
    unshift: unshift,
    isSingleLine: isSingleLine,
    trim: trim,
    blockTrim: blockTrim,
    ltrim: ltrim,
    rtrim: rtrim,
    strRepeat: strRepeat,
    paren: paren
  };

  if (typeof module !== "undefined" && module !== null) module.exports = exports;

}).call(this);
