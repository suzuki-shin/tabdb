(function() {
  var UnsupportedError, basename, build_and_show, cmd, fs, js2coffee, path, runFiles, _;
  var __slice = Array.prototype.slice;

  js2coffee = require('./js2coffee');

  _ = require('underscore');

  fs = require('fs');

  path = require('path');

  UnsupportedError = js2coffee.UnsupportedError;

  basename = path.basename;

  cmd = basename(process.argv[1]);

  build_and_show = function(fname) {
    var contents, output;
    contents = fs.readFileSync(fname, 'utf-8');
    output = js2coffee.build(contents);
    return console.log("%s", output);
  };

  runFiles = function(proc) {
    var files, work;
    files = process.argv.slice(2);
    work = proc || build_and_show;
    try {
      return work('/dev/stdin');
    } catch (e) {
      if (e.code !== 'EAGAIN') throw e;
      if (files.length === 0) {
        console.warn("Usage:");
        console.warn("  " + cmd + " file.js");
        console.warn("  " + cmd + " file.js > output.txt");
        console.warn("  cat file.js | " + cmd);
        process.exit(1);
      }
      return _.each(files, function(fname) {
        return work(fname);
      });
    }
  };

  module.exports = {
    run: function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      try {
        return runFiles.apply(this, args);
      } catch (e) {
        if ((_ref = e.constructor) !== UnsupportedError && _ref !== SyntaxError) {
          throw e;
        }
        console.warn("Error: " + e.message);
        return console.warn("Cursor position: " + e.cursor);
      }
    }
  };

}).call(this);
