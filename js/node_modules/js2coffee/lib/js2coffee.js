(function() {
  var Builder, Code, Node, Transformer, Typenames, Types, UnsupportedError, blockTrim, buildCoffee, exports, isSingleLine, ltrim, p, paren, parser, rtrim, strEscape, strRepeat, trim, unreserve, unshift, _, _ref, _ref2;
  var __slice = Array.prototype.slice;

  parser = (this.Narcissus || require('./narcissus_packed')).parser;

  _ = this._ || require('underscore');

  _ref = this.NodeExt || require('./node_ext'), Types = _ref.Types, Typenames = _ref.Typenames, Node = _ref.Node;

  _ref2 = this.Js2coffeeHelpers || require('./helpers'), Code = _ref2.Code, p = _ref2.p, strEscape = _ref2.strEscape, unreserve = _ref2.unreserve, unshift = _ref2.unshift, isSingleLine = _ref2.isSingleLine, trim = _ref2.trim, blockTrim = _ref2.blockTrim, ltrim = _ref2.ltrim, rtrim = _ref2.rtrim, strRepeat = _ref2.strRepeat, paren = _ref2.paren;

  buildCoffee = function(str) {
    var builder, scriptNode;
    builder = new Builder;
    scriptNode = parser.parse("" + str + "\n");
    return trim(builder.build(scriptNode));
  };

  Builder = (function() {

    function Builder() {
      this.transformer = new Transformer;
    }

    Builder.prototype.build = function() {
      var args, fn, name, node, out;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      node = args[0];
      this.transform(node);
      name = 'other';
      if (node !== void 0 && node.typeName) name = node.typeName();
      fn = this[name] || this.other;
      out = fn.apply(this, args);
      if (node.parenthesized) {
        return paren(out);
      } else {
        return out;
      }
    };

    Builder.prototype.transform = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.transformer.transform.apply(this.transformer, args);
    };

    Builder.prototype.body = function(node, opts) {
      var str;
      if (opts == null) opts = {};
      str = this.build(node, opts);
      str = blockTrim(str);
      str = unshift(str);
      if (str.length > 0) {
        return str;
      } else {
        return "";
      }
    };

    Builder.prototype['script'] = function(n, opts) {
      var c;
      var _this = this;
      if (opts == null) opts = {};
      c = new Code;
      _.each(n.functions, function(item) {
        return c.add(_this.build(item));
      });
      _.each(n.nonfunctions, function(item) {
        return c.add(_this.build(item));
      });
      return c.toString();
    };

    Builder.prototype['property_identifier'] = function(n) {
      var str;
      str = n.value.toString();
      if (str.match(/^([_\$a-z][_\$a-z0-9]*)$/i) || str.match(/^[0-9]+$/i)) {
        return str;
      } else {
        return strEscape(str);
      }
    };

    Builder.prototype['identifier'] = function(n) {
      return unreserve(n.value.toString());
    };

    Builder.prototype['number'] = function(n) {
      return "" + (n.src());
    };

    Builder.prototype['id'] = function(n) {
      return unreserve(n);
    };

    Builder.prototype['id_param'] = function(n) {
      var _ref3;
      if ((_ref3 = n.toString()) === 'undefined') {
        return "" + n + "_";
      } else {
        return this.id(n);
      }
    };

    Builder.prototype['return'] = function(n) {
      if (!(n.value != null)) {
        return "return\n";
      } else {
        return "return " + (this.build(n.value)) + "\n";
      }
    };

    Builder.prototype[';'] = function(n) {
      var src;
      if (n.expression == null) {
        return "";
      } else if (n.expression.typeName() === 'object_init') {
        src = this.object_init(n.expression);
        if (n.parenthesized) {
          return src;
        } else {
          return "" + (unshift(blockTrim(src))) + "\n";
        }
      } else {
        return this.build(n.expression) + "\n";
      }
    };

    Builder.prototype['new'] = function(n) {
      return "new " + (this.build(n.left()));
    };

    Builder.prototype['new_with_args'] = function(n) {
      return "new " + (this.build(n.left())) + "(" + (this.build(n.right())) + ")";
    };

    Builder.prototype['unary_plus'] = function(n) {
      return "+" + (this.build(n.left()));
    };

    Builder.prototype['unary_minus'] = function(n) {
      return "-" + (this.build(n.left()));
    };

    Builder.prototype['this'] = function(n) {
      return 'this';
    };

    Builder.prototype['null'] = function(n) {
      return 'null';
    };

    Builder.prototype['true'] = function(n) {
      return 'true';
    };

    Builder.prototype['false'] = function(n) {
      return 'false';
    };

    Builder.prototype['void'] = function(n) {
      return 'undefined';
    };

    Builder.prototype['debugger'] = function(n) {
      return "debugger\n";
    };

    Builder.prototype['break'] = function(n) {
      return "break\n";
    };

    Builder.prototype['continue'] = function(n) {
      return "continue\n";
    };

    Builder.prototype['!'] = function(n) {
      return "not " + (this.build(n.left()));
    };

    Builder.prototype['~'] = function(n) {
      return "~" + (this.build(n.left()));
    };

    Builder.prototype['typeof'] = function(n) {
      return "typeof " + (this.build(n.left()));
    };

    Builder.prototype['index'] = function(n) {
      return "" + (this.build(n.left())) + "[" + (this.build(n.right())) + "]";
    };

    Builder.prototype['throw'] = function(n) {
      return "throw " + (this.build(n.exception));
    };

    Builder.prototype['+'] = function(n) {
      return this.binary_operator(n, '+');
    };

    Builder.prototype['-'] = function(n) {
      return this.binary_operator(n, '-');
    };

    Builder.prototype['*'] = function(n) {
      return this.binary_operator(n, '*');
    };

    Builder.prototype['/'] = function(n) {
      return this.binary_operator(n, '/');
    };

    Builder.prototype['%'] = function(n) {
      return this.binary_operator(n, '%');
    };

    Builder.prototype['>'] = function(n) {
      return this.binary_operator(n, '>');
    };

    Builder.prototype['<'] = function(n) {
      return this.binary_operator(n, '<');
    };

    Builder.prototype['&'] = function(n) {
      return this.binary_operator(n, '&');
    };

    Builder.prototype['|'] = function(n) {
      return this.binary_operator(n, '|');
    };

    Builder.prototype['^'] = function(n) {
      return this.binary_operator(n, '^');
    };

    Builder.prototype['&&'] = function(n) {
      return this.binary_operator(n, 'and');
    };

    Builder.prototype['||'] = function(n) {
      return this.binary_operator(n, 'or');
    };

    Builder.prototype['in'] = function(n) {
      return this.binary_operator(n, 'of');
    };

    Builder.prototype['<<'] = function(n) {
      return this.binary_operator(n, '<<');
    };

    Builder.prototype['<='] = function(n) {
      return this.binary_operator(n, '<=');
    };

    Builder.prototype['>>'] = function(n) {
      return this.binary_operator(n, '>>');
    };

    Builder.prototype['>='] = function(n) {
      return this.binary_operator(n, '>=');
    };

    Builder.prototype['!='] = function(n) {
      return this.binary_operator(n, '!=');
    };

    Builder.prototype['==='] = function(n) {
      return this.binary_operator(n, '==');
    };

    Builder.prototype['!=='] = function(n) {
      return this.binary_operator(n, '!=');
    };

    Builder.prototype['=='] = function(n) {
      return this.binary_operator(n, '==');
    };

    Builder.prototype['!='] = function(n) {
      return this.binary_operator(n, '!=');
    };

    Builder.prototype['instanceof'] = function(n) {
      return this.binary_operator(n, 'instanceof');
    };

    Builder.prototype['binary_operator'] = function(n, sign) {
      return "" + (this.build(n.left())) + " " + sign + " " + (this.build(n.right()));
    };

    Builder.prototype['--'] = function(n) {
      return this.increment_decrement(n, '--');
    };

    Builder.prototype['++'] = function(n) {
      return this.increment_decrement(n, '++');
    };

    Builder.prototype['increment_decrement'] = function(n, sign) {
      if (n.postfix) {
        return "" + (this.build(n.left())) + sign;
      } else {
        return "" + sign + (this.build(n.left()));
      }
    };

    Builder.prototype['='] = function(n) {
      var sign;
      sign = n.assignOp != null ? Types[n.assignOp] + '=' : '=';
      return "" + (this.build(n.left())) + " " + sign + " " + (this.build(n.right()));
    };

    Builder.prototype[','] = function(n) {
      var list;
      var _this = this;
      list = _.map(n.children, function(item) {
        return _this.build(item) + "\n";
      });
      return list.join('');
    };

    Builder.prototype['regexp'] = function(n) {
      var begins_with, flag, m, value;
      m = n.value.toString().match(/^\/(.*)\/([a-z]?)/);
      value = m[1];
      flag = m[2];
      begins_with = value[0];
      if (begins_with === ' ' || begins_with === '=') {
        if (flag.length > 0) {
          return "RegExp(" + (strEscape(value)) + ", \"" + flag + "\")";
        } else {
          return "RegExp(" + (strEscape(value)) + ")";
        }
      } else {
        return "/" + value + "/" + flag;
      }
    };

    Builder.prototype['string'] = function(n) {
      return strEscape(n.value);
    };

    Builder.prototype['call'] = function(n) {
      if (n.right().children.length === 0) {
        return "" + (this.build(n.left())) + "()";
      } else {
        return "" + (this.build(n.left())) + "(" + (this.build(n.right())) + ")";
      }
    };

    Builder.prototype['call_statement'] = function(n) {
      var left;
      left = this.build(n.left());
      if (n.left().isA('function')) left = paren(left);
      if (n.right().children.length === 0) {
        return "" + left + "()";
      } else {
        return "" + left + " " + (this.build(n.right()));
      }
    };

    Builder.prototype['list'] = function(n) {
      var list;
      var _this = this;
      list = _.map(n.children, function(item) {
        return _this.build(item);
      });
      return list.join(", ");
    };

    Builder.prototype['delete'] = function(n) {
      var ids;
      var _this = this;
      ids = _.map(n.children, function(el) {
        return _this.build(el);
      });
      ids = ids.join(', ');
      return "delete " + ids + "\n";
    };

    Builder.prototype['.'] = function(n) {
      var left, right;
      left = this.build(n.left());
      right = this.build(n.right());
      if (n.isThis && n.isPrototype) {
        return "@::";
      } else if (n.isThis) {
        return "@" + right;
      } else if (n.isPrototype) {
        return "" + left + "::";
      } else if (n.left().isPrototype) {
        return "" + left + right;
      } else {
        return "" + left + "." + right;
      }
    };

    Builder.prototype['try'] = function(n) {
      var c;
      var _this = this;
      c = new Code;
      c.add('try');
      c.scope(this.body(n.tryBlock));
      _.each(n.catchClauses, function(clause) {
        return c.add(_this.build(clause));
      });
      if (n.finallyBlock != null) {
        c.add("finally");
        c.scope(this.body(n.finallyBlock));
      }
      return c;
    };

    Builder.prototype['catch'] = function(n) {
      var body_, c;
      body_ = this.body(n.block);
      if (trim(body_).length === 0) return '';
      c = new Code;
      if (n.varName != null) {
        c.add("catch " + n.varName);
      } else {
        c.add('catch');
      }
      c.scope(this.body(n.block));
      return c;
    };

    Builder.prototype['?'] = function(n) {
      return "(if " + (this.build(n.left())) + " then " + (this.build(n.children[1])) + " else " + (this.build(n.children[2])) + ")";
    };

    Builder.prototype['for'] = function(n) {
      var c;
      c = new Code;
      if (n.setup != null) c.add("" + (this.build(n.setup)) + "\n");
      if (n.condition != null) {
        c.add("while " + (this.build(n.condition)) + "\n");
      } else {
        c.add("loop");
      }
      c.scope(this.body(n.body));
      if (n.update != null) c.scope(this.body(n.update));
      return c;
    };

    Builder.prototype['for_in'] = function(n) {
      var c;
      c = new Code;
      c.add("for " + (this.build(n.iterator)) + " of " + (this.build(n.object)));
      c.scope(this.body(n.body));
      return c;
    };

    Builder.prototype['while'] = function(n) {
      var c, keyword;
      c = new Code;
      keyword = n.positive ? "while" : "until";
      c.add("" + keyword + " " + (this.build(n.condition)));
      c.scope(this.body(n.body));
      return c;
    };

    Builder.prototype['do'] = function(n) {
      var c;
      c = new Code;
      c.add("loop");
      c.scope(this.body(n.body));
      if (n.condition != null) {
        c.scope("break unless " + (this.build(n.condition)));
      }
      return c;
    };

    Builder.prototype['if'] = function(n) {
      var body_, c, keyword;
      c = new Code;
      keyword = n.positive ? "if" : "unless";
      body_ = this.body(n.thenPart);
      if (isSingleLine(body_) && !(n.elsePart != null)) {
        c.add("" + (trim(body_)) + "  " + keyword + " " + (this.build(n.condition)) + "\n");
      } else {
        c.add("" + keyword + " " + (this.build(n.condition)));
        c.scope(this.body(n.thenPart));
        if (n.elsePart != null) {
          if (n.elsePart.typeName() === 'if') {
            c.add("else " + (this.build(n.elsePart).toString()));
          } else {
            c.add("else\n");
            c.scope(this.body(n.elsePart));
          }
        }
      }
      return c;
    };

    Builder.prototype['switch'] = function(n) {
      var c;
      var _this = this;
      c = new Code;
      c.add("switch " + (this.build(n.discriminant)) + "\n");
      _.each(n.cases, function(item) {
        var first;
        if (item.value === 'default') {
          c.scope("else");
        } else {
          c.scope("when " + (_this.build(item.caseLabel)) + "\n");
        }
        c.scope(_this.body(item.statements), 2);
        return first = false;
      });
      return c;
    };

    Builder.prototype['existence_check'] = function(n) {
      return "" + (this.build(n.left())) + "?";
    };

    Builder.prototype['array_init'] = function(n) {
      if (n.children.length === 0) {
        return "[]";
      } else {
        return "[ " + (this.list(n)) + " ]";
      }
    };

    Builder.prototype['property_init'] = function(n) {
      return "" + (this.property_identifier(n.left())) + ": " + (this.build(n.right()));
    };

    Builder.prototype['object_init'] = function(n, options) {
      var c, list;
      var _this = this;
      if (options == null) options = {};
      if (n.children.length === 0) {
        return "{}";
      } else if (n.children.length === 1) {
        return this.build(n.children[0]);
      } else {
        list = _.map(n.children, function(item) {
          return _this.build(item);
        });
        c = new Code;
        c.scope(list.join("\n"));
        if (options.brackets != null) c = "{" + c + "}";
        return c;
      }
    };

    Builder.prototype['function'] = function(n) {
      var body, c, params;
      var _this = this;
      c = new Code;
      params = _.map(n.params, function(str) {
        if (str.constructor === String) {
          return _this.id_param(str);
        } else {
          return _this.build(str);
        }
      });
      if (n.name) c.add("" + n.name + " = ");
      if (n.params.length > 0) {
        c.add("(" + (params.join(', ')) + ") ->");
      } else {
        c.add("->");
      }
      body = this.body(n.body);
      if (trim(body).length > 0) {
        c.scope(body);
      } else {
        c.add("\n");
      }
      return c;
    };

    Builder.prototype['var'] = function(n) {
      var list;
      var _this = this;
      list = _.map(n.children, function(item) {
        if (item.initializer != null) {
          return "" + item.value + " = " + (_this.build(item.initializer));
        }
      });
      return _.compact(list).join("\n") + "\n";
    };

    Builder.prototype['other'] = function(n) {
      return this.unsupported(n, "" + (n.typeName()) + " is not supported yet");
    };

    Builder.prototype['getter'] = function(n) {
      return this.unsupported(n, "getter syntax is not supported; use __defineGetter__");
    };

    Builder.prototype['setter'] = function(n) {
      return this.unsupported(n, "setter syntax is not supported; use __defineSetter__");
    };

    Builder.prototype['label'] = function(n) {
      return this.unsupported(n, "labels are not supported by CoffeeScript");
    };

    Builder.prototype['const'] = function(n) {
      return this.unsupported(n, "consts are not supported by CoffeeScript");
    };

    Builder.prototype['block'] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.script.apply(this, args);
    };

    Builder.prototype['unsupported'] = function(node, message) {
      throw new UnsupportedError("Unsupported: " + message, node);
    };

    return Builder;

  })();

  Transformer = (function() {

    function Transformer() {}

    Transformer.prototype.transform = function() {
      var args, fn, node, type;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      node = args[0];
      if (node.transformed != null) return;
      type = node.typeName();
      fn = this[type];
      if (fn) {
        fn.apply(this, args);
        return node.transformed = true;
      }
    };

    Transformer.prototype['script'] = function(n) {
      var last;
      var _this = this;
      n.functions = [];
      n.nonfunctions = [];
      _.each(n.children, function(item) {
        if (item.isA('function')) {
          return n.functions.push(item);
        } else {
          return n.nonfunctions.push(item);
        }
      });
      last = null;
      return _.each(n.nonfunctions, function(item) {
        var expr;
        if (item.expression != null) {
          expr = item.expression;
          if ((last != null ? last.isA('object_init') : void 0) && expr.isA('object_init')) {
            item.parenthesized = true;
          } else {
            item.parenthesized = false;
          }
          return last = expr;
        }
      });
    };

    Transformer.prototype['.'] = function(n) {
      n.isThis = n.left().isA('this');
      return n.isPrototype = n.right().isA('identifier') && n.right().value === 'prototype';
    };

    Transformer.prototype[';'] = function(n) {
      if (n.expression != null) {
        n.expression.parenthesized = false;
        if (n.expression.isA('call')) {
          n.expression.type = Typenames['call_statement'];
          return this.call_statement(n);
        }
      }
    };

    Transformer.prototype['function'] = function(n) {
      return n.body.walk({
        last: true
      }, function(parent, node) {
        var lastNode;
        if (node.isA('return') && node.value) {
          lastNode = parent.children[parent.children.length - 1];
          lastNode.type = Typenames[';'];
          return lastNode.expression = lastNode.value;
        }
      });
    };

    Transformer.prototype['switch'] = function(n) {
      var _this = this;
      return _.each(n.cases, function(item) {
        var block, ch;
        block = item.statements;
        ch = block.children;
        if (block.last().isA('break')) return delete ch[ch.length - 1];
      });
    };

    Transformer.prototype['call_statement'] = function(n) {
      if (n.children[1]) {
        return _.each(n.children[1].children, function(child, i) {
          if (child.isA('function') && i !== n.children[1].children.length - 1) {
            return child.parenthesized = true;
          }
        });
      }
    };

    Transformer.prototype['block'] = function(n) {
      return this.script(n);
    };

    Transformer.prototype['if'] = function(n) {
      return this.inversible(n);
    };

    Transformer.prototype['while'] = function(n) {
      return this.inversible(n);
    };

    Transformer.prototype['inversible'] = function(n) {
      this.transform(n.condition);
      if (n.condition.isA('!=')) {
        n.condition.type = Typenames['=='];
        return n.positive = false;
      } else if (n.condition.isA('!')) {
        n.condition = n.condition.left();
        return n.positive = false;
      } else {
        return n.positive = true;
      }
    };

    Transformer.prototype['=='] = function(n) {
      if (n.right().isA('null', 'void')) {
        n.type = Typenames['!'];
        return n.children = [
          n.clone({
            type: Typenames['existence_check'],
            children: [n.left()]
          })
        ];
      }
    };

    Transformer.prototype['!='] = function(n) {
      if (n.right().isA('null', 'void')) {
        n.type = Typenames['existence_check'];
        return n.children = [n.left()];
      }
    };

    return Transformer;

  })();

  UnsupportedError = (function() {

    function UnsupportedError(str, src) {
      this.message = str;
      this.cursor = src.start;
      this.line = src.lineno;
      this.source = src.tokenizer.source;
    }

    UnsupportedError.prototype.toString = function() {
      return this.message;
    };

    return UnsupportedError;

  })();

  this.Js2coffee = exports = {
    version: '0.1.1',
    build: buildCoffee,
    UnsupportedError: UnsupportedError
  };

  if (typeof module !== "undefined" && module !== null) module.exports = exports;

}).call(this);
